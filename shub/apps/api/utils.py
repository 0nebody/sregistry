'''

Copyright (c) 2017, Vanessa Sochat, All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

'''

from django.http import JsonResponse
from shub.logger import bot

from rest_framework.permissions import (
    DjangoObjectPermissions,
    SAFE_METHODS, 
    Http404
)

from singularity.utils import write_file
from shub.apps.users.models import User

from datetime import datetime, timezone
import hashlib
import hmac
import base64
import json
import requests
import shutil
import tempfile
import re

def validate_request(auth,
                     payload,
                     sender="push",
                     timestamp=None,
                     superuser=True):

    '''validate header and payload for a request

    Parameters
    ==========
    auth: the Authorization header content
    payload: the payload to assess
    timestamp: the timestamp associated with the request
    superuser: if the user must be superuser for validity

    Returns
    =======
    True if the request is valid, False if not
    '''

    header,content = auth.split(' ')
    content = content.split(',')
    values = dict()
    for entry in content:
         key,val = re.split('=', entry, 1)
         values[key] = val

    if header != 'SREGISTRY-HMAC-SHA256':
        bot.debug('Invalid SREGISTRY Authentication scheme, request invalid.')
        return False

    if "Credential" not in values or "Signature" not in values:
        bot.debug('Headers missing, request is invalid.')
        return False

    bot.debug(values['Credential'])
    kind,username,ts = values['Credential'].split('/')
    username = base64.b64decode(username)
    if kind != sender:
        bot.debug('Mismatch between request kind (%s) and sender (%s), request invalid.' %(kind,sender))
        return False

    if timestamp is not None:
        if ts != timestamp:
            bot.debug('%s is expired, must be %s.' %(ts,timestamp))
            return False

    try:
        user = User.objects.get(username=username)
    except:
        bot.debug('%s is not a valid user, request invalid.' %username)
        return False

    if superuser is True:
        if user.admin is False:
            bot.debug('User %s is not a superuser, request invalid.' %user.username)
            return False

    request_signature = values['Signature']
    secret = user.token()
    return validate_secret(secret,payload,request_signature)


def encode(item):
    ''' encode an item to bytes to work with hexdigest

    Parameters
    ==========
    item: some string or bytes value to check
    '''
    if not isinstance(item,bytes):
        item = item.encode('utf-8')
    return item


def validate_secret(secret,payload,request_signature):
    ''' use hmac digest to compare a request_signature to one generated
    using a server secret against a payload. Valid means matching.

    Parameters
    ==========
    secret: the secret to generate the hash
    payload: the content to include in the digest
    request_signature: the signature generated by the request
                       to check against

    Returns
    =======
    True if secret + payload to generate signature matches 
                       request signature

    '''
    payload = encode(payload)
    request_signature = encode(request_signature)
    secret = encode(secret)
    digest = hmac.new(secret,digestmod=hashlib.sha256,
                      msg=payload).hexdigest().encode('utf-8')
    return hmac.compare_digest(digest, request_signature)


def JsonResponseMessage(status=500,message=None,status_message='error'):
    response = {'status':status_message}
    if message != None:
        response['message'] = message
    return JsonResponse(response, status=500)


#####################################################################################
# PERMISSIONS
#####################################################################################


class ObjectOnlyPermissions(DjangoObjectPermissions):

    def has_permission(self, request, view):
        return (
            request.method in SAFE_METHODS or
            request.user and
            request.user.is_authenticated()
        )

